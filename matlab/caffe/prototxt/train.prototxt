name: "train"
input: "data"
input_dim: 64
input_dim: 3
input_dim: 227
input_dim: 227
input: "label"
input_dim: 64
input_dim: 1
input_dim: 1
input_dim: 1
# --------------------------------layer 1----------------------------------
layers {
      name: "conv1"
      type: CONVOLUTION
      bottom: "data"
      top: "conv1"
      convolution_param {
          num_output: 96
          kernel_h: 11
          kernel_w: 11
          pad_h: 0
          pad_w: 0
          stride_h: 4
          stride_w: 4
          bias_term: true
          bias_filler {
               type: "constant"
               value: 0.0000000000
          }
          weight_filler {
               type: "gaussian"
               std: 0.0100000000
          }
      }
}
layers{
      name: "relu1"
      type: RELU
      bottom: "conv1"
      top: "conv1"
}
layers{
      name: "pool1"
      type: POOLING
      bottom: "conv1"
      top: "pool1"
      pooling_param{
            pool: MAX
            kernel_h: 3
            kernel_w: 3
            pad_h: 0
            pad_w: 0
            stride_h: 2
            stride_w: 2
      }
}
# --------------------------------layer 2----------------------------------
layers {
      name: "conv2"
      type: CONVOLUTION
      bottom: "pool1"
      top: "conv2"
      convolution_param {
          num_output: 256
          kernel_h: 5
          kernel_w: 5
          pad_h: 2
          pad_w: 2
          stride_h: 1
          stride_w: 1
          bias_term: true
          bias_filler {
               type: "constant"
               value: 0.0000000000
          }
          weight_filler {
               type: "gaussian"
               std: 0.0100000000
          }
      }
}
layers{
      name: "relu2"
      type: RELU
      bottom: "conv2"
      top: "conv2"
}
layers{
      name: "pool2"
      type: POOLING
      bottom: "conv2"
      top: "pool2"
      pooling_param{
            pool: MAX
            kernel_h: 3
            kernel_w: 3
            pad_h: 0
            pad_w: 0
            stride_h: 2
            stride_w: 2
      }
}
# --------------------------------layer 3----------------------------------
layers {
      name: "conv3"
      type: CONVOLUTION
      bottom: "pool2"
      top: "conv3"
      convolution_param {
          num_output: 384
          kernel_h: 3
          kernel_w: 3
          pad_h: 1
          pad_w: 1
          stride_h: 1
          stride_w: 1
          bias_term: true
          bias_filler {
               type: "constant"
               value: 0.0000000000
          }
          weight_filler {
               type: "gaussian"
               std: 0.0100000000
          }
      }
}
layers{
      name: "relu3"
      type: RELU
      bottom: "conv3"
      top: "conv3"
}
# --------------------------------layer 4----------------------------------
layers {
      name: "conv4"
      type: CONVOLUTION
      bottom: "conv3"
      top: "conv4"
      convolution_param {
          num_output: 384
          kernel_h: 3
          kernel_w: 3
          pad_h: 1
          pad_w: 1
          stride_h: 1
          stride_w: 1
          bias_term: true
          bias_filler {
               type: "constant"
               value: 0.0000000000
          }
          weight_filler {
               type: "gaussian"
               std: 0.0100000000
          }
      }
}
layers{
      name: "relu4"
      type: RELU
      bottom: "conv4"
      top: "conv4"
}
# --------------------------------layer 5----------------------------------
layers {
      name: "conv5"
      type: CONVOLUTION
      bottom: "conv4"
      top: "conv5"
      convolution_param {
          num_output: 256
          kernel_h: 3
          kernel_w: 3
          pad_h: 1
          pad_w: 1
          stride_h: 1
          stride_w: 1
          bias_term: true
          bias_filler {
               type: "constant"
               value: 0.0000000000
          }
          weight_filler {
               type: "gaussian"
               std: 0.0100000000
          }
      }
}
layers{
      name: "relu5"
      type: RELU
      bottom: "conv5"
      top: "conv5"
}
layers{
      name: "pool5"
      type: POOLING
      bottom: "conv5"
      top: "pool5"
      pooling_param{
            pool: MAX
            kernel_h: 3
            kernel_w: 3
            pad_h: 0
            pad_w: 0
            stride_h: 2
            stride_w: 2
      }
}
# --------------------------------layer 6----------------------------------
layers{
      name: "fc6"
      type: INNER_PRODUCT
      bottom: "pool5"
      top: "fc6"
      inner_product_param{
            num_output: 4096
          bias_term: true
          bias_filler {
               type: "constant"
               value: 0.0000000000
          }
          weight_filler {
               type: "gaussian"
               std: 0.0100000000
          }
      }
}
layers{
      name: "relu6"
      type: RELU
      bottom: "fc6"
      top: "fc6"
}
layers{
      name: "drop6"
      type: DROPOUT
      bottom: "fc6"
      top: "fc6"
      dropout_param{
            dropout_ratio: 0.5000000000
      }
}
# --------------------------------layer 7----------------------------------
layers{
      name: "fc7"
      type: INNER_PRODUCT
      bottom: "fc6"
      top: "fc7"
      inner_product_param{
            num_output: 4096
          bias_term: true
          bias_filler {
               type: "constant"
               value: 0.0000000000
          }
          weight_filler {
               type: "gaussian"
               std: 0.0100000000
          }
      }
}
layers{
      name: "relu7"
      type: RELU
      bottom: "fc7"
      top: "fc7"
}
layers{
      name: "drop7"
      type: DROPOUT
      bottom: "fc7"
      top: "fc7"
      dropout_param{
            dropout_ratio: 0.5000000000
      }
}
# --------------------------------layer 8----------------------------------
layers{
      name: "fc8"
      type: INNER_PRODUCT
      bottom: "fc7"
      top: "fc8"
      inner_product_param{
            num_output: 200
          bias_term: true
          bias_filler {
               type: "constant"
               value: 0.0000000000
          }
          weight_filler {
               type: "gaussian"
               std: 0.0100000000
          }
      }
}
layers{
      name: "output_or_error"
      type: SOFTMAX_LOSS
      bottom: "fc8"
      bottom: "label"
      top: "last"
}
